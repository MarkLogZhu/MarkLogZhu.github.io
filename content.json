[{"title":"条码的生成与打印输出","date":"2016-08-29T12:11:00.000Z","path":"2016/08/29/条码生成与打印/","text":"现如今条码的使用场景相当频繁，今天就让我们来学习一下条码的生成与打印 涉及知识点 zxing的使用 zxing的来由 DLL引用 CODE_128码 DataMatrix码 打印输出 打印工具类 打印机设置 一、zxing的使用zxing的来由zxing 最开始是一个基于Java语言编写的开源类库，用于生成/解析多种格式的1D/2D条码图像处理库，后面提供了多个平台版本的客户端，如本篇用到的.Net版本。 DLL引用 首先去他的官网下载dll文件 添加对应.NET版本的DLL CODE_128码1234567891011121314151617181920212223242526272829/// &lt;summary&gt;/// 生成二维码/// &lt;/summary&gt;/// &lt;param name=\"data\"&gt;数据源&lt;/param&gt;/// &lt;param name=\"format\"&gt;编码格式&lt;/param&gt;/// &lt;param name=\"width\"&gt;条码宽度&lt;/param&gt;/// &lt;param name=\"height\"&gt;条码高度&lt;/param&gt; public Bitmap generationGraph(string data, BarcodeFormat format, int width, int height) &#123; QrCodeEncodingOptions options = new QrCodeEncodingOptions &#123; // 排错率越高，存储信息越少，但对清晰度要求越低 ErrorCorrection = ErrorCorrectionLevel.H, DisableECI = true, // 设置内容编码 CharacterSet = \"UTF-8\", // 设置二维码宽度 Width = width, // 设置二维码高度 Height = height, // 设置二维码的边距,单位不是固定像素 Margin = 1, //底部显示内容 PureBarcode = false &#125;; BarcodeWriter writer = new BarcodeWriter(); // 设置编码格式 writer.Format = format; writer.Options = options; return writer.Write(data); &#125; 调用:1Bitmap bitmap = generationGraph(\"1234567890987654321\",BarcodeFormat.CODE_128,100,200); DataMatrix码123456789101112131415public Bitmap getDataMatrix(string inputData, int barcodeWidth, int barcodeHeight)&#123; DatamatrixEncodingOptions options = new DatamatrixEncodingOptions() &#123; Width = barcodeWidth,//宽度 Height = barcodeHeight,//高度 Margin = 0, PureBarcode = true, SymbolShape = SymbolShapeHint.FORCE_SQUARE &#125;; options.Hints.Add(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H); BarcodeWriter writer = new BarcodeWriter() &#123; Format = BarcodeFormat.DATA_MATRIX, Options = options &#125;; return writer.Write(inputData);&#125; 调用: 1Bitmap bitmap = getDataMatrix(\"1234567890987654321\",100,200); 效果图： 二、打印输出打印工具类条码图片生成了接下来自然就是打印输出到纸张上了，NET 打印方式有很多，这次我们采用 PrintDocument 来输出打印。二话不说，直接上代码！ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126namespace Barcode.util&#123; class PrintUtils &#123; public static PrintUtils Instance = new PrintUtils(); private PrintDocument printDocument = null; /// &lt;summary&gt; /// 条码图片 /// &lt;/summary&gt; private Image mBitmpa; /// &lt;summary&gt; /// 纸张宽度 单位定义为毫米mm /// &lt;/summary&gt; public int paperWidth; /// &lt;summary&gt; /// 纸张高度 单位定义为毫米mm /// &lt;/summary&gt; public int paperHeight; private PrintUtils() &#123; printDocument = new PrintDocument(); #region 添加事件监听 printDocument.BeginPrint += new PrintEventHandler(printDocument_BeginPrint); printDocument.PrintPage += new PrintPageEventHandler(printDocument_PrintPage); printDocument.EndPrint += new PrintEventHandler(printDocument_EndPrint); #endregion &#125; #region 设置打印属性设置 /// &lt;summary&gt; /// 设置打印属性 /// &lt;/summary&gt; private void setPrintProperties() &#123; // 设置文档名 printDocument.DocumentName = \"条码打印\";//设置完后可在打印对话框及队列中显示（默认显示document） // 设置选择的打印机名称 printDocument.PrinterSettings.PrinterName = \"TEC B-SX5\"; // 设置纸张大小（可以不设置取，取默认设置） PaperSize ps = new PaperSize(\"Your Paper Name\", (int)(paperWidth / 25.4 * 100), (int)(paperHeight / 25.4 * 100)); ps.RawKind = 150; //如果是自定义纸张，就要大于118 printDocument.DefaultPageSettings.PaperSize = ps; printDocument.DefaultPageSettings.Landscape = true; &#125; #endregion #region 打印机事件监听 #region 打印前事件 /// &lt;summary&gt; /// 打印前事件 /// &lt;/summary&gt; /// &lt;param name=\"sender\"&gt;&lt;/param&gt; /// &lt;param name=\"e\"&gt;&lt;/param&gt; void printDocument_BeginPrint(object sender, PrintEventArgs e) &#123; //设置打印属性 setPrintProperties(); &#125; #endregion #region 打印输出时(过程)事件 /// &lt;summary&gt; /// 打印输出时(过程)事件 /// &lt;/summary&gt; /// &lt;param name=\"sender\"&gt;&lt;/param&gt; /// &lt;param name=\"e\"&gt;&lt;/param&gt; void printDocument_PrintPage(object sender, PrintPageEventArgs e) &#123; // 打印输出信息 Graphics g = e.Graphics; g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias; #region 在画布上画图片 g.DrawImage( mBitmpa, new System.Drawing.Rectangle(5, 5, mBitmpa.Width, mBitmpa.Height), new System.Drawing.Rectangle(0, 0, mBitmpa.Width, mBitmpa.Height), System.Drawing.GraphicsUnit.Pixel); #endregion &#125; #endregion #region 打印结束事件 /// &lt;summary&gt; /// 打印结束事件 /// &lt;/summary&gt; /// &lt;param name=\"sender\"&gt;&lt;/param&gt; /// &lt;param name=\"e\"&gt;&lt;/param&gt; void printDocument_EndPrint(object sender, PrintEventArgs e) &#123; // 打印结束后相关操作 &#125; #endregion #endregion #region 打印预览 /// &lt;summary&gt; /// 打印预览 /// &lt;/summary&gt; /// &lt;param name=\"mBitmpa\"&gt;&lt;/param&gt; public void printPreview(Image mBitmpa, int paperWidth, int paperHeight) &#123; this.mBitmpa = mBitmpa; this.paperWidth = paperWidth; this.paperHeight = paperHeight; PrintPreviewDialog ppd = new PrintPreviewDialog(); ppd.Document = printDocument; ppd.ShowDialog(); &#125; #endregion #region 打印图片 /// &lt;summary&gt; /// 打印图片 /// &lt;/summary&gt; /// &lt;param name=\"mBitmpa\"&gt;图片源&lt;/param&gt; /// &lt;param name=\"mModel\"&gt;配置信息&lt;/param&gt; public void printPicture(Image mBitmpa, int paperWidth, int paperHeight) &#123; this.mBitmpa = mBitmpa; this.paperWidth = paperWidth; this.paperHeight = paperHeight; printDocument.Print(); &#125; #endregion &#125;&#125; 调用:1PrintUtils.Instance.printPreview(this.pictureBox1.Image, pictureBox1.Width, pictureBox1.Height); 打印机设置本次打印机采用 东芝B-SX5，纸张形状为卷状，并且两张之间有间隔。打印机如果未设置好的话，会出现出纸长度不一的现象。","tags":[{"name":"C#","slug":"C","permalink":"https://marklogzhu.github.io/tags/C/"}]}]