---
layout: post
title: "Spring学习总结(一)--入门"
date: 2018-05-16 10:18
comments: true
categories: Spring
tags:
	- Java
	- SSM
	- Spring
---

无论是 `SSH` 还是 `SSM` 中间的 `S` 都表示 `Spring`,从这就可以看出 `Spring` 的重要性，那么我们今天就来看看 `Spring` 是什么东西!

<!-- more --> 


## 什么是 Spring

`Spring` 是一个开放源代码的设计层面框架，他解决的是业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用。`Spring` 是于2003 年兴起的一个轻量级的 `Java` 开发框架，由 `Rod Johnson`创建。简单来说，`Spring` 是一个分层的 `JavaSE/EE full-stack(一站式)` 轻量级开源框架。

## 使用 Spring 的好处

* `Spring` 可以使开发人员使用 `POJOs` 开发企业级的应用程序。只使用 `POJOs` 的好处是你不需要一个 `EJB` 容器产品，比如一个应用程序服务器，但是你可以选择使用一个健壮的 `servlet` 容器，比如 `Tomcat` 或者一些商业产品。

* `Spring` 在一个单元模式中是有组织的。即使包和类的数量非常大，你只要担心你需要的，而其它的就可以忽略了。

* `Spring` 不会让你白费力气做重复工作，它真正的利用了一些现有的技术，像 `ORM` 框架、日志框架、`JEE`、`Quartz` 和 `JDK` 计时器，其他视图技术。

* 测试一个用 `Spring` 编写的应用程序很容易，因为环境相关的代码被移动到这个框架中。此外，通过使用 `JavaBean-style POJOs`，它在使用依赖注入注入测试数据时变得更容易。

* `Spring` 的 `web` 框架是一个设计良好的 `web MVC` 框架，它为比如 `Structs` 或者其他工程上的或者不怎么受欢迎的 `web` 框架提供了一个很好的供替代的选择。

* `Spring` 对 `JavaEE` 开发中非常难用的一些 `API`（JDBC、JavaMail、远程调用等），都提供了封装，使这些 `API` 应用难度大大降低。

* 轻量级的 `IOC` 容器往往是轻量级的，例如，特别是当与 `EJB` 容器相比的时候。这有利于在内存和 `CPU` 资源有限的计算机上开发和部署应用程序。

* `Spring` 提供了一致的事务管理接口，可向下扩展到（使用一个单一的数据库，例如）本地事务并扩展到全局事务（例如，使用 `JTA`）。

## Spring 两大特性

### 依赖注入（DI）

`Spring` 核心之一就是控制反转的依赖注入（`DI`）模式。控制反转（`IoC`）是一个通用的概念，它可以用许多不同的方式去表达，依赖注入仅仅是控制反转的一个具体的例子。

当编写一个复杂的 `Java` 应用程序时，应用程序类应该尽可能的独立于其他的 `Java` 类来增加这些类可重用可能性，当进行单元测试时，可以使它们独立于其他类进行测试。依赖注入（或者有时被称为配线）有助于将这些类粘合在一起，并且在同一时间让它们保持独立。

到底什么是依赖注入？让我们将这两个词分开来看一看。这里将依赖关系部分转化为两个类之间的关联。例如，类 A 依赖于类 B。现在，让我们看一看第二部分，注入。所有这一切都意味着类 B 将通过 `IoC` 被注入到类 A 中。

依赖注入可以以向构造函数传递参数的方式发生，或者通过使用 `setter` 方法 `post-construction`。由于依赖注入是 `Spring` 框架的核心部分，所以我将在之后的章节中利用实例去解释这一概念。

### 面向方面的程序设计（AOP）

`Spring` 框架的一个关键组件是面向方面的程序设计（`AOP`）框架。一个程序中跨越多个点的功能被称为横切关注点，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样常见的很好的关于方面的例子，比如日志记录、声明性事务、安全性，和缓存等等。

在 `OOP` 中模块化的关键单元是类，而在 `AOP` 中模块化的关键单元是切面。`AOP` 帮助你将横切关注点从它们所影响的对象中分离出来，然而依赖注入帮助你将你的应用程序对象从彼此中分离出来。

`Spring` 框架的 `AOP` 模块提供了面向方面的程序设计实现，可以定义诸如方法拦截器和切入点等，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于 `.Net` 属性的方式合并行为信息到代码中。我将在一个独立的章节中讨论更多关于 `Spring AOP` 的概念。

## Spring 核心体系结构(4.3.11版本)

![](/img/01.png)

从上图可以看到可以分为以下几个模块：
* core
* aop
* data access
* web
* test

### core

`core` 包含4个模块:
	
	* spring-core：依赖注入 IoC 与 DI 的最基本实现
	* spring-beans：Bean 工厂与 bean 的装配
	* spring-context：spring 的 context 上下文,即 IoC 容器
	* spring-expression：spring 表达式语言

它们的依赖关系如下：

![](/img/02.png)

### aop

aop部分包含4个模块:

	* spring-aop：面向切面编程
	* spring-aspects：集成 AspectJ
	* spring-instrument：提供一些类级的工具支持和 ClassLoader 级的实现，用于服务器
	* spring-instrument-tomcat：针对 tomcat 的 instrument 实现

它们的依赖关系如下：

![](/img/03.png)

### data access

data access部分包含5个模块:

	* spring-jdbc：jdbc的支持
	* spring-tx：事务控制
	* spring-orm：对象关系映射，集成orm框架
	* spring-oxm：对象xml映射
	* spring-jms：java消息服务
	
它们的依赖关系如下：

![](/img/04.png)

### web

web部分包含4个模块：

	* spring-web：基础web功能，如文件上传
	* spring-webmvc：mvc实现
	* spring-websocket：为web应用提供的高效通信工具
	* spring-messaging：用于构建基于消息的应用程序

它们的依赖关系如下:

![](/img/05.png)

### test

test 部分只有一个模块，我将 spring-context-support 也放在这吧

	* spring-test：spring测试，提供junit与mock测试功能
	* spring-context-support：spring额外支持包，比如邮件服务、视图解析等

它们的依赖关系如下:

![](/img/06.png)
