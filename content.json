[{"title":"Servlet之生命周期","date":"2017-03-19T10:10:00.000Z","path":"2017/03/19/JavaWeb/Servlet之生命周期/","text":"一、Servlet简介JavaServlet 是用 Java 语言编写的服务端程序。其主要功能是接收和响应客户端的请求。 二、Servlet结构-- Servlet 接口 -- GenericServlet 抽象类 -- HttpServlet 抽象类 -- 自定义业务Servlet 业务类 三、Servlet接口方法=======================生命周期方法开始====================================== * void init(ServletConfig config) 作用：初始化方法 调用者：服务器 调用时机：默认第一次访问的时候或load-on-startup中设置正整数值时(值越大优先级越低) 调用次数：一次 * void service(ServletRequest req, ServletResponse res) 作用：处理业务逻辑方法 调用者：服务器 调用时机：请求来的时候 调用次数：请求来一次调用一次 * void destroy() 作用：初始化方法 调用者：服务器 调用时机：Service被移除或服务器正常关闭时 调用次数：一次 =======================生命周期方法结束====================================== * ServletConfig getServletConfig() 作用：获得任何初始化和启动参数信息 * String getServletInfo() 作用：获取有关其自身的基本信息，比如作者、版本和版权 四、编码实践Servlet生命周期 1.编写类 123456789101112131415161718192021222324252627282930313233import java.io.IOException;import javax.servlet.Servlet;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;public class LifeServlet implements Servlet &#123; @Override public void init(ServletConfig config) throws ServletException &#123; System.out.println(\"init()调用\"); &#125; @Override public ServletConfig getServletConfig() &#123; return null; &#125; @Override public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException &#123; System.out.println(\"service()调用\"); &#125; @Override public String getServletInfo() &#123; return null; &#125; @Override public void destroy() &#123; System.out.println(\"destroy()调用\"); &#125;&#125; 2.配置web.xml文件(若new类为Servlet，IDE默认已配置，可跳过此步) 12345678910&lt;servlet&gt; &lt;description&gt;&lt;/description&gt; &lt;display-name&gt;LifeServlet&lt;/display-name&gt; &lt;servlet-name&gt;LifeServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.mark.day01.LifeServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;LifeServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/life&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 3.启动Tomcat 4.按步骤操作对照结果 4.1 在浏览器中输入项目地址(http://localhost:8888/day01_Servlet/life) 注1：因笔者电脑中先安装了 IIS，后安装 Tomcat，所以为了解决端口冲突所以将端口设为8888 注2：每个人的项目名称和包名不同，请按自己的实际项目修改web.xml跟浏览器地址 4.2 查看控制器输出 4.3 在浏览器中刷新页面，然后查看控制器输出 可以发现service方法又一次被调用了，而init()方法只在第一次访问时调用 4.4 关闭Tomcat,查看控制器输出 注： 五、总结serlvet是一个单实例多线程对象，默认第一次访问的时候,服务器创建servlet,并调用init实现初始化操作.并调用一次service方法。每当请求来的时候,服务器创建一个线程,调用service方法执行自己的业务逻辑。当serlvet被移除的时候服务器正常关闭的时候,服务器调用servlet的destroy方法实现销毁操作.","tags":[{"name":"JAVA WEB","slug":"JAVA-WEB","permalink":"https://marklogzhu.github.io/tags/JAVA-WEB/"}]},{"title":"web.xml","date":"2017-03-19T03:11:00.000Z","path":"2017/03/19/JavaWeb/web,xml/","text":"一、web.xml简介web.xml是JavaWeb项目的配置文件，主要用来配置欢迎页、servlet、filter等信息，如果你的项目不需要配置这些信息的话，也可以不创建这个文件 二、常用标签 指定欢迎页面 1234&lt;welcome-file-list&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;index1.jsp&lt;/welcome-file&gt;&lt;/welcome-file-list&gt; 注：指定两个欢迎页，如果index.jsp不存在就寻找index1.jsp 命名与定制URL(如：Servlet和JSP) 命名 123456&lt;servlet&gt; &lt;!-- Servlet名字，可以随便取，有多个Servlet时不允许重名 --&gt; &lt;servlet-name&gt;servlet1&lt;/servlet-name&gt; &lt;!-- 指定实现这个Servlet的类。完整的包名+类名 --&gt; &lt;servlet-class&gt;net.test.TestServlet&lt;/servlet-class&gt;&lt;/servlet&gt; 定义URL 123456&lt;servlet-mapping&gt; &lt;!--必须和&lt;servlet&gt;里的&lt;servlet-name&gt;内容一样--&gt; &lt;servlet-name&gt;servlet1&lt;/servlet-name&gt; &lt;!-- 指定访问这个Servlet的URL。这里给出的是对于整个Web应用的相对URL路径 --&gt; &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;&lt; /servlet-mapping&gt; 定制初始化参数 1234567891011121314&lt;servlet&gt; &lt;servlet-name&gt;servlet1&lt;/servlet-name&gt; &lt;servlet-class&gt;net.test.TestServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;!-- 参数名 --&gt; &lt;param-name&gt;E-mail&lt;/param-name&gt; &lt;!-- 参数值 --&gt; &lt;param-value&gt;Tommy@163.com&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;userName&lt;/param-name&gt; &lt;param-value&gt;Tommy&lt;/param-value&gt; &lt;/init-param&gt;&lt; /servlet&gt; 在Servlet类中取值：getServletConfig().getInitParameter(&quot;E-mail&quot;) 指定错误处理页面 12345&lt;!-- 错误码 --&gt;&lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/error404.jsp&lt;/location&gt;&lt;/error-page&gt; 12345&lt;!-- 异常类型 --&gt;&lt;error-page&gt; &lt;exception-type&gt;Java.lang.Exception&lt;exception-type&gt; &lt;location&gt;/exception.jsp&lt;location&gt;&lt;/error-page&gt; 过滤器 12345678910111213&lt;filter&gt; &lt;!--过滤器名，可以随便取，当web应用中有多个过滤器时不允许重名 --&gt; &lt;filter-name&gt;XXXCharaSetFilter&lt;/filter-name&gt; &lt;!-- 具体的过滤器的类的完整的包名+类名。注意：不能写错了。否则容器不能正确的实例化过滤器 --&gt; &lt;filter-class&gt;net.test.CharSetFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;!-- 过滤器名，注意要和上面的&lt;filter-name&gt;里的名字一样 --&gt; &lt;filter-name&gt;XXXCharaSetFilter&lt;/filter-name&gt; &lt;!-- 指定过滤器负责过滤的URL。这里指定了*.jsp表示在访问任何一个jsp页面时都会先使用mypack.SampleFilter过滤器进行过滤。如果写成login.jsp.则只有在访问login.jsp时才会调用该过滤器进行过滤 --&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt; 监听器 1234&lt;listener&gt; &lt;!-- 配置会话侦听器，class表示一个HttpSessionListener或 HttpSessionActivationListener 或 HttpSessionAttributeListener或 HttpSessionBindingListener的实现类。该节点允许多个 --&gt; &lt;listener-class&gt;net.test.XXXLisenet&lt;/listener-class&gt;&lt;/listener&gt; 会话(Session)过期时间 1234&lt;session-config&gt; &lt;!-- 设定 HttpSession 的生命周期。时间以分钟为单位 --&gt; &lt;session-timeout&gt;60&lt;/session-timeout&gt;&lt;/session-config&gt; 三、参考文章： web工程中的web.xml文件有什么作用呢？ 一个很详细的web.xml讲解","tags":[{"name":"JAVA WEB","slug":"JAVA-WEB","permalink":"https://marklogzhu.github.io/tags/JAVA-WEB/"}]},{"title":"条码的生成与打印输出","date":"2016-08-29T12:11:00.000Z","path":"2016/08/29/条码生成与打印/","text":"现如今条码的使用场景相当频繁，今天就让我们来学习一下条码的生成与打印 涉及知识点 zxing的使用 zxing的来由 DLL引用 CODE_128码 DataMatrix码 打印输出 打印工具类 打印机设置 一、zxing的使用zxing的来由zxing 最开始是一个基于Java语言编写的开源类库，用于生成/解析多种格式的1D/2D条码图像处理库，后面提供了多个平台版本的客户端，如本篇用到的.Net版本。 DLL引用 首先去他的官网下载dll文件 添加对应.NET版本的DLL CODE_128码1234567891011121314151617181920212223242526272829/// &lt;summary&gt;/// 生成二维码/// &lt;/summary&gt;/// &lt;param name=\"data\"&gt;数据源&lt;/param&gt;/// &lt;param name=\"format\"&gt;编码格式&lt;/param&gt;/// &lt;param name=\"width\"&gt;条码宽度&lt;/param&gt;/// &lt;param name=\"height\"&gt;条码高度&lt;/param&gt; public Bitmap generationGraph(string data, BarcodeFormat format, int width, int height) &#123; QrCodeEncodingOptions options = new QrCodeEncodingOptions &#123; // 排错率越高，存储信息越少，但对清晰度要求越低 ErrorCorrection = ErrorCorrectionLevel.H, DisableECI = true, // 设置内容编码 CharacterSet = \"UTF-8\", // 设置二维码宽度 Width = width, // 设置二维码高度 Height = height, // 设置二维码的边距,单位不是固定像素 Margin = 1, //底部显示内容 PureBarcode = false &#125;; BarcodeWriter writer = new BarcodeWriter(); // 设置编码格式 writer.Format = format; writer.Options = options; return writer.Write(data); &#125; 调用:1Bitmap bitmap = generationGraph(\"1234567890987654321\",BarcodeFormat.CODE_128,100,200); DataMatrix码123456789101112131415public Bitmap getDataMatrix(string inputData, int barcodeWidth, int barcodeHeight)&#123; DatamatrixEncodingOptions options = new DatamatrixEncodingOptions() &#123; Width = barcodeWidth,//宽度 Height = barcodeHeight,//高度 Margin = 0, PureBarcode = true, SymbolShape = SymbolShapeHint.FORCE_SQUARE &#125;; options.Hints.Add(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H); BarcodeWriter writer = new BarcodeWriter() &#123; Format = BarcodeFormat.DATA_MATRIX, Options = options &#125;; return writer.Write(inputData);&#125; 调用: 1Bitmap bitmap = getDataMatrix(\"1234567890987654321\",100,200); 效果图： 二、打印输出打印工具类条码图片生成了接下来自然就是打印输出到纸张上了，NET 打印方式有很多，这次我们采用 PrintDocument 来输出打印。二话不说，直接上代码！ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126namespace Barcode.util&#123; class PrintUtils &#123; public static PrintUtils Instance = new PrintUtils(); private PrintDocument printDocument = null; /// &lt;summary&gt; /// 条码图片 /// &lt;/summary&gt; private Image mBitmpa; /// &lt;summary&gt; /// 纸张宽度 单位定义为毫米mm /// &lt;/summary&gt; public int paperWidth; /// &lt;summary&gt; /// 纸张高度 单位定义为毫米mm /// &lt;/summary&gt; public int paperHeight; private PrintUtils() &#123; printDocument = new PrintDocument(); #region 添加事件监听 printDocument.BeginPrint += new PrintEventHandler(printDocument_BeginPrint); printDocument.PrintPage += new PrintPageEventHandler(printDocument_PrintPage); printDocument.EndPrint += new PrintEventHandler(printDocument_EndPrint); #endregion &#125; #region 设置打印属性设置 /// &lt;summary&gt; /// 设置打印属性 /// &lt;/summary&gt; private void setPrintProperties() &#123; // 设置文档名 printDocument.DocumentName = \"条码打印\";//设置完后可在打印对话框及队列中显示（默认显示document） // 设置选择的打印机名称 printDocument.PrinterSettings.PrinterName = \"TEC B-SX5\"; // 设置纸张大小（可以不设置取，取默认设置） PaperSize ps = new PaperSize(\"Your Paper Name\", (int)(paperWidth / 25.4 * 100), (int)(paperHeight / 25.4 * 100)); ps.RawKind = 150; //如果是自定义纸张，就要大于118 printDocument.DefaultPageSettings.PaperSize = ps; printDocument.DefaultPageSettings.Landscape = true; &#125; #endregion #region 打印机事件监听 #region 打印前事件 /// &lt;summary&gt; /// 打印前事件 /// &lt;/summary&gt; /// &lt;param name=\"sender\"&gt;&lt;/param&gt; /// &lt;param name=\"e\"&gt;&lt;/param&gt; void printDocument_BeginPrint(object sender, PrintEventArgs e) &#123; //设置打印属性 setPrintProperties(); &#125; #endregion #region 打印输出时(过程)事件 /// &lt;summary&gt; /// 打印输出时(过程)事件 /// &lt;/summary&gt; /// &lt;param name=\"sender\"&gt;&lt;/param&gt; /// &lt;param name=\"e\"&gt;&lt;/param&gt; void printDocument_PrintPage(object sender, PrintPageEventArgs e) &#123; // 打印输出信息 Graphics g = e.Graphics; g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias; #region 在画布上画图片 g.DrawImage( mBitmpa, new System.Drawing.Rectangle(5, 5, mBitmpa.Width, mBitmpa.Height), new System.Drawing.Rectangle(0, 0, mBitmpa.Width, mBitmpa.Height), System.Drawing.GraphicsUnit.Pixel); #endregion &#125; #endregion #region 打印结束事件 /// &lt;summary&gt; /// 打印结束事件 /// &lt;/summary&gt; /// &lt;param name=\"sender\"&gt;&lt;/param&gt; /// &lt;param name=\"e\"&gt;&lt;/param&gt; void printDocument_EndPrint(object sender, PrintEventArgs e) &#123; // 打印结束后相关操作 &#125; #endregion #endregion #region 打印预览 /// &lt;summary&gt; /// 打印预览 /// &lt;/summary&gt; /// &lt;param name=\"mBitmpa\"&gt;&lt;/param&gt; public void printPreview(Image mBitmpa, int paperWidth, int paperHeight) &#123; this.mBitmpa = mBitmpa; this.paperWidth = paperWidth; this.paperHeight = paperHeight; PrintPreviewDialog ppd = new PrintPreviewDialog(); ppd.Document = printDocument; ppd.ShowDialog(); &#125; #endregion #region 打印图片 /// &lt;summary&gt; /// 打印图片 /// &lt;/summary&gt; /// &lt;param name=\"mBitmpa\"&gt;图片源&lt;/param&gt; /// &lt;param name=\"mModel\"&gt;配置信息&lt;/param&gt; public void printPicture(Image mBitmpa, int paperWidth, int paperHeight) &#123; this.mBitmpa = mBitmpa; this.paperWidth = paperWidth; this.paperHeight = paperHeight; printDocument.Print(); &#125; #endregion &#125;&#125; 调用:1PrintUtils.Instance.printPreview(this.pictureBox1.Image, pictureBox1.Width, pictureBox1.Height); 打印机设置本次打印机采用 东芝B-SX5，纸张形状为卷状，并且两张之间有间隔。打印机如果未设置好的话，会出现出纸长度不一的现象。","tags":[{"name":"C#","slug":"C","permalink":"https://marklogzhu.github.io/tags/C/"}]}]